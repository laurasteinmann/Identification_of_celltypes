# Validating different Results generated by UMAP and HDBSCAN
# Libraries
import pandas as pd
import numpy as np
import os
from scipy import stats

# Getting the results above or under a certain threshold
os.chdir('../../Single_Cell_Data/')
results1 = pd.read_csv('Parameter_Files/Parameters4_30.csv', index_col=0)
results_all = pd.read_csv('Parameters_old.csv', index_col=0)
results = pd.concat([results_all, results1])
results['Ratio'] = results['Rand_Index']/results["Clusters"]
results
results.to_csv("Parameters_old.csv")
max_rand_index = results.Rand_Index.max()
results_bestrandindex = results[results['Rand_Index'] == max_rand_index]
results_bestclusters = results[results['Clusters'] == results.Clusters.min()]
results_bestratio = results[results['Ratio'] == results.Ratio.max()]

results_bestrandindex
results_bestratio
results_bestclusters
results_bestratio.to_csv("Parameters_Bestratio_old.csv")
results_bestrandindex.to_csv("Parameters_Bestrandindex_old.csv")
results_bestclusters.to_csv("Parameters_Bestclusters_old.csv")

# Calculating Correlation coefficients for the best clusters
os.chdir('../../Single_Cell_Data/')
cluster = np.loadtxt(
    'HDBSCAN/HDBSCAN_Best/Labels_UMAP4_25_4_37.csv', delimiter=',')
cluster = np.loadtxt(
    'HDBSCAN/HDBSCAN_Best/Labels_UMAP4_25_4_36.csv', delimiter=',')
matrix = pd.read_csv('Comparison_Tables/Comparison_4_25_4_36.csv', index_col=0)
rna_seq = pd.read_hdf('RNA-Seq.h5', key='counts')

cluster_of_interest = 5

rna_seq['Cluster_Number'] = cluster
cells_in_cluster = rna_seq[rna_seq['Cluster_Number'] == cluster_of_interest]
pattern_zeros = np.where(cluster != cluster_of_interest, 0, cluster)
pattern = np.where(pattern_zeros == cluster_of_interest, 1, pattern_zeros)
rna_cor = rna_seq.drop('Cluster_Number', axis=1)

correlations = []
number_genes = rna_cor.shape[1]
for i in range(0, number_genes):
    gene = rna_cor.iloc[:, i]
    cor = stats.spearmanr(pattern, gene)[0]
    correlations.append(cor)

rna_cor.loc['Correlations'] = correlations
table = rna_cor.transpose()
positive_best = table.nlargest(10, 'Correlations')
negative_best = table.nsmallest(10, 'Correlations')
positive_best['Correlations']
negative_best['Correlations']
# Calculating Correlation coefficients for the best clusters with
# celltype background
cluster = np.loadtxt(
    'HDBSCAN/HDBSCAN_Best/Labels_UMAP4_25_4_37.csv', delimiter=',')
matrix = pd.read_csv('Comparison_Tables/Comparison_4_25_4_36.csv', index_col=0)
rna_seq = pd.read_hdf('RNA-Seq.h5', key='counts')
celltype_labels = pd.read_csv('Celltypes_small.csv', index_col=0)
rna_seq["Celltypes"] = celltype_labels.values
rna_seq["Cluster"] = cluster
Celltype_of_Interest = "Endodermis"
Cluster_of_Interest = 11

small_background = rna_seq[rna_seq["Celltypes"] == Celltype_of_Interest]
cells_in_cluster = small_background[small_background['Cluster']
                                    == Cluster_of_Interest]
small_clusters = small_background.Cluster
pattern_zeros = np.where(
    small_clusters != Cluster_of_Interest, 0, small_clusters)
pattern = np.where(pattern_zeros == Cluster_of_Interest, 1, pattern_zeros)
rna_cor = small_background.drop('Cluster', axis=1)
rna_cor = rna_cor.drop('Celltypes', axis=1)

correlations = []
number_genes = rna_cor.shape[1]
for i in range(0, number_genes):
    gene = rna_cor.iloc[:, i]
    cor = stats.spearmanr(pattern, gene)[0]
    correlations.append(cor)

rna_cor.loc['Correlations'] = correlations
table = rna_cor.transpose()
positive_best = table.nlargest(10, 'Correlations')
negative_best = table.nsmallest(10, 'Correlations')
positive_best['Correlations']
negative_best['Correlations']